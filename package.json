{
  "name": "vscode-php-getters-setters-cv",
  "displayName": "PHP Getters & Setters (CV fork)",
  "description": "Create PHP getters and setters from class properties",
  "version": "1.5.0",
  "publisher": "cvergne",
  "author": "Roberto Segura <roberto@phproberto.com>",
  "contributors": [
    "Christophe VERGNE <dev@christophevergne.fr>"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/cvergne/vscode-php-getters-setters"
  },
  "bugs": {
    "url": "https://github.com/cvergne/vscode-php-getters-setters/issues"
  },
  "icon": "images/icon.png",
  "engines": {
    "vscode": "^1.63.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "php",
    "getter",
    "getters",
    "setter",
    "setters"
  ],
  "activationEvents": [
    "onLanguage:php",
    "onCommand:phpGettersSetters.insertGetter",
    "onCommand:phpGettersSetters.insertSetter",
    "onCommand:phpGettersSetters.insertGetterAndSetter"
  ],
  "main": "./out/extension",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "PHP getters & setters configuration",
      "properties": {
        "phpGettersSetters.redirect": {
          "type": "boolean",
          "default": true,
          "description": "Redirect to generated functions after creating them?"
        },
        "phpGettersSetters.spacesAfterParam": {
          "type": "integer",
          "default": 2,
          "description": "How many spaces should we add after a @param tag?"
        },
        "phpGettersSetters.spacesAfterParamVar": {
          "type": "integer",
          "default": 2,
          "description": "How many spaces should we add after a @param variable name?"
        },
        "phpGettersSetters.spacesAfterReturn": {
          "type": "integer",
          "default": 2,
          "description": "How many spaces should we add after a @return tag?"
        },
        "phpGettersSetters.generatePHPDoc": {
          "type": "boolean",
          "default": true,
          "description": "Generate PHPDoc in the generated functions?"
        },
        "phpGettersSetters.enablePHP7TypeHints": {
          "type": "boolean",
          "default": true,
          "description": "Enable the PHP 7+ type hints (nullable type in setter, return type in getter)?"
        },
        "phpGettersSetters.templatesDir": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Folder where custom templates are stored"
        },
        "phpGettersSetters.getterTemplate": {
          "type": "string",
          "default": "getter.js",
          "description": "File to use as template for getters"
        },
        "phpGettersSetters.setterTemplate": {
          "type": "string",
          "default": "setter.js",
          "description": "File to use as template for setters"
        }
      }
    },
    "keybindings": [
      {
        "command": "phpGettersSetters.insertAllGetterAndSetter",
        "key": "ctrl+alt+g",
        "mac": "cmd+opt+g",
        "when": "editorTextFocus"
      }
    ],
    "commands": [
      {
        "command": "phpGettersSetters.insertGetter",
        "title": "Insert pointed PHP Getter"
      },
      {
        "command": "phpGettersSetters.insertSetter",
        "title": "Insert pointed PHP Setter"
      },
      {
        "command": "phpGettersSetters.insertGetterAndSetter",
        "title": "Insert pointed PHP Getter & Setter"
      },
      {
        "command": "phpGettersSetters.insertAllGetterAndSetter",
        "title": "Insert all PHP Getter & Setter"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "phpGettersSetters.insertGetter",
          "when": "editorLangId == php"
        },
        {
          "command": "phpGettersSetters.insertSetter",
          "when": "editorLangId == php"
        },
        {
          "command": "phpGettersSetters.insertGetterAndSetter",
          "when": "editorLangId == php"
        },
        {
          "command": "phpGettersSetters.insertAllGetterAndSetter",
          "when": "editorLangId == php"
        }
      ],
      "editor/context": [
        {
          "when": "resourceLangId == php",
          "command": "phpGettersSetters.insertGetter",
          "alt": "phpGettersSetters.insertGetter",
          "group": "0_phpGettersSetters@1"
        },
        {
          "when": "resourceLangId == php",
          "command": "phpGettersSetters.insertSetter",
          "alt": "phpGettersSetters.insertSetter",
          "group": "0_phpGettersSetters@2"
        },
        {
          "when": "resourceLangId == php",
          "command": "phpGettersSetters.insertGetterAndSetter",
          "alt": "phpGettersSetters.insertGetterAndSetter",
          "group": "0_phpGettersSetters@3"
        },
        {
          "when": "resourceLangId == php",
          "command": "phpGettersSetters.insertAllGetterAndSetter",
          "alt": "phpGettersSetters.insertAllGetterAndSetter",
          "group": "0_phpGettersSetters@4"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.6",
    "@types/node": "^12.12.0",
    "@types/vscode": "^1.63.1",
    "@typescript-eslint/eslint-plugin": "^4.16.0",
    "@typescript-eslint/parser": "^4.16.0",
    "@vscode/test-electron": "^2.1.1",
    "eslint": "^7.21.0",
    "glob": "^7.1.4",
    "mocha": "^6.1.4",
    "source-map-support": "^0.5.12",
    "typescript": "^4.2.2"
  },
  "dependencies": {}
}
